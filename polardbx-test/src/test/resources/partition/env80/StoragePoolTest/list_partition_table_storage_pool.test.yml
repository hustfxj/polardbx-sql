storageList: [$dn1, $dn2, $dn3, $dn4, $dn5, $dn6, $dn7, $dn8]
testCases:
  ## first pass, create database and table
  - prepareDDls:
      - "use polardbx"
      - "drop database if exists orders_comm1;"
      - "drop database if exists test_db4;"
#      - "alter storage pool sp3 append node '$dn8'"
      - "create database test_db4 mode = 'auto'
       LOCALITY = 'storage_pools=\"sp1,sp3\",primary_storage_pool=\"sp3\"'
      "
      - "create database  orders_comm1 mode = 'auto'
       LOCALITY = 'storage_pools=\"sp1,sp2\",primary_storage_pool=\"sp1\"'
      "
      - "use orders_comm1;"
      - "drop table if exists commodity;"
      - "drop table if exists t1;"
      - "drop table if exists orders_region;"
      - "create table commodity(
      commodity_id int,
      commodity_name varchar(64)
      ) BROADCAST;"
      - "CREATE TABLE t1(a int) partition by hash(a) partitions 16;"
      - "CREATE TABLE orders_region(
          order_id int AUTO_INCREMENT primary key,
          customer_id int,
          commodity_id int,
          country varchar(64),
          city int,
          order_time datetime not null)
         partition BY list(city)
         (
           partition p1 VALUES IN (1) LOCALITY = 'storage_pools=\"sp2\"',
          partition p2 VALUES IN (2) LOCALITY = 'storage_pools=\"sp2\"',
          partition p_default values in (default)
          ) LOCALITY = 'storage_pools=\"sp1\"';"
    dbNames: [orders_comm1]
    rejectDDls:
      - ddl: "drop storage pool sp2;"
        message: "The storage pool definition contains storage inst still in use!"
      - ddl: "alter storage pool sp3 append node '$dn8';"
        message: "The storage pool definition contains storage inst still in use!"
    expectedSQLs:
    cleanupDDls:
      - "use polardbx;"
    checkTriggers:
      - "select count(1) from metadb.ddl_engine where state != 'success';###0"
      - "select count(1) from information_schema.ddl_plan where state != 'success';###0"
    checkActions:
      storagePoolValueCheck:
        - sp1 "$dn3,$dn4" "$dn3"
        - sp2 "$dn5,$dn6" "$dn5"
        - sp3 "$dn7,$dn8" "$dn7"
        - _recycle "" ""
        - _default "$dn1,$dn2" $dn1
      datasourceCheck:
        - test_db1 $dn3,$dn4
        - test_db2 $dn5,$dn6
        - test_db3 $dn3,$dn4,$dn5,$dn6
        - test_db4 $dn3,$dn4,$dn7,$dn8
        - old_auto_database $dn1,$dn2
        - old_auto_database2 $dn1,$dn2
        - orders_comm1 $dn3,$dn4,$dn5,$dn6
      localityValueCheck:
        - orders_comm1.orders_region table "storage_pools='sp1',primary_storage_pool='sp1'"
      tableGroupMatchCheck:
        - orders_comm1.orders_region $tg1 "storage_pools='sp1',primary_storage_pool='sp1'"
      # auto generate create table, tablegroup.
      partitionLocalityCheck:
        - $tg1.p1 "storage_pools='sp2',primary_storage_pool='sp2'"
        - $tg1.p2 "storage_pools='sp2',primary_storage_pool='sp2'"
      topologyCheck:
        - orders_comm1.orders_region.p1 partition $dn5,$dn6
        - orders_comm1.orders_region.p2 partition $dn5,$dn6
        - orders_comm1.orders_region.p_default partition $dn3,$dn4
      #  auto generate by locality value check.
      #  auto generate by partition locality check. with each table.
  ## second pass, split partition and add partition
  - prepareDDls:
      - "use orders_comm1"
      - "alter table orders_region add partition
      (PARTITION p3 values in (3) LOCALITY = 'storage_pools=\"sp2\"');"
      - "alter table orders_region SPLIT PARTITION p_default INTO 
         (PARTITION p4 VALUES in (4) LOCALITY = 'storage_pools=\"sp2\"',
          partition p_default values in (default));"
    dbNames: [orders_comm1]
    rejectDDls:
      - ddl: "alter table orders_region move partitions p_default to '$dn5'"
        message: "alter tablegroup operation not compatebale with partition"
    expectedSQLs:
    cleanupDDls:
      - "use polardbx;"
    checkTriggers:
      - "select count(1) from metadb.ddl_engine where state != 'success';###0"
      - "select count(1) from information_schema.ddl_plan where state != 'success';###0"
    checkActions:
      storagePoolValueCheck:
        - sp1 "$dn3,$dn4" "$dn3"
        - sp2 "$dn5,$dn6" "$dn5"
        - sp3 "$dn7,$dn8" "$dn7"
        - _recycle "" ""
        - _default "$dn1,$dn2" $dn1
      datasourceCheck:
        - test_db1 $dn3,$dn4
        - test_db2 $dn5,$dn6
        - test_db3 $dn3,$dn4,$dn5,$dn6
        - test_db4 $dn3,$dn4,$dn7,$dn8
        - old_auto_database $dn1,$dn2
        - old_auto_database2 $dn1,$dn2
        - orders_comm1 $dn3,$dn4,$dn5,$dn6
      localityValueCheck:
        - orders_comm1.orders_region table "storage_pools='sp1',primary_storage_pool='sp1'"
      tableGroupMatchCheck:
        - orders_comm1.orders_region $tg1 "storage_pools='sp1',primary_storage_pool='sp1'"
      # auto generate create table, tablegroup.
      partitionLocalityCheck:
        - $tg1.p1 "storage_pools='sp2',primary_storage_pool='sp2'"
        - $tg1.p2 "storage_pools='sp2',primary_storage_pool='sp2'"
        - $tg1.p3 "storage_pools='sp2',primary_storage_pool='sp2'"
        - $tg1.p4 "storage_pools='sp2',primary_storage_pool='sp2'"
      topologyCheck:
        - orders_comm1.orders_region.p1 partition $dn5,$dn6
        - orders_comm1.orders_region.p2 partition $dn5,$dn6
        - orders_comm1.orders_region.p3 partition $dn5,$dn6
        - orders_comm1.orders_region.p4 partition $dn5,$dn6
        - orders_comm1.orders_region.p_default partition $dn3,$dn4
  ## thrid pass, set partitions locality
  - prepareDDls:
      - "use orders_comm1"
      - " ALTER DATABASE orders_comm1 set 
                LOCALITY= \"storage_pools='sp1,sp2,sp3',primary_storage_pool='sp1'\""
      - "alter tablegroup $tg1 SET PARTITIONS p1 LOCALITY=\"storage_pools='sp3'\";"
    dbNames: [orders_comm1]
    rejectDDls:
      - ddl: "alter table orders_region move partitions p1 to '$dn5'"
        message: "alter tablegroup operation not compatebale with partition"
    expectedSQLs:
    cleanupDDls:
      - "use polardbx;"
    checkTriggers:
      - "select count(1) from metadb.ddl_engine_task where state != 'success' and schema_name = 'orders_comm1';###0"
      - "select count(1) from metadb.ddl_plan where state != 'success' and table_schema = 'orders_comm1';###0"
    checkActions:
      storagePoolValueCheck:
        - sp1 "$dn3,$dn4" "$dn3"
        - sp2 "$dn5,$dn6" "$dn5"
        - sp3 "$dn7,$dn8" "$dn7"
        - _recycle "" ""
        - _default "$dn1,$dn2" $dn1
      datasourceCheck:
        - test_db1 $dn3,$dn4
        - test_db2 $dn5,$dn6
        - test_db3 $dn3,$dn4,$dn5,$dn6
        - test_db4 $dn3,$dn4,$dn7,$dn8
        - old_auto_database $dn1,$dn2
        - old_auto_database2 $dn1,$dn2
        - orders_comm1 $dn3,$dn4,$dn5,$dn6,$dn7,$dn8
      localityValueCheck:
        - orders_comm1.orders_region table "storage_pools='sp1',primary_storage_pool='sp1'"
      tableGroupMatchCheck:
        - orders_comm1.orders_region $tg1 "storage_pools='sp1',primary_storage_pool='sp1'"
      # auto generate create table, tablegroup.
      partitionLocalityCheck:
        - $tg1.p1 "storage_pools='sp3',primary_storage_pool='sp3'"
        - $tg1.p2 "storage_pools='sp2',primary_storage_pool='sp2'"
        - $tg1.p3 "storage_pools='sp2',primary_storage_pool='sp2'"
        - $tg1.p4 "storage_pools='sp2',primary_storage_pool='sp2'"
      topologyCheck:
        - orders_comm1.orders_region.p1 partition $dn7,$dn8
        - orders_comm1.orders_region.p2 partition $dn5,$dn6
        - orders_comm1.orders_region.p3 partition $dn5,$dn6
        - orders_comm1.orders_region.p4 partition $dn5,$dn6
        - orders_comm1.orders_region.p_default partition $dn3,$dn4

  ## forth pass, auto balanace
  - prepareDDls:
      - "use orders_comm1"
      - " insert into orders_region(city, order_time) values (1, now()), (2, now()), (3, now());"
      - " insert into orders_region(city, order_time) select city, order_time from orders_region;"
      - " insert into orders_region(city, order_time) select city, order_time from orders_region;"
      - " insert into orders_region(city, order_time) select city, order_time from orders_region;"
      - " insert into orders_region(city, order_time) select city, order_time from orders_region;"
      - " insert into orders_region(city, order_time) select city, order_time from orders_region;"
      - " insert into orders_region(city, order_time) select city, order_time from orders_region;"
      - " insert into orders_region(city, order_time) select city, order_time from orders_region;"
      - " insert into orders_region(city, order_time) select city, order_time from orders_region;"
      - " insert into orders_region(city, order_time) select city, order_time from orders_region;"
      - " insert into orders_region(city, order_time) select city, order_time from orders_region;"
      - " insert into orders_region(city, order_time) select city, order_time from orders_region;"
      - " insert into orders_region(city, order_time) select city, order_time from orders_region;"
      - " insert into orders_region(city, order_time) select city, order_time from orders_region;"
      - "rebalance tenant sp3 policy = 'data_balance'"
    dbNames: [orders_comm1]
    rejectDDls:
      - ddl: "alter table orders_region move partitions p1 to '$dn5'"
        message: "alter tablegroup operation not compatebale with partition"
    expectedSQLs:
      - sql: "select sum(table_rows) from information_schema.table_detail where table_name
      = 'orders_region' and storage_inst_id in ('$dn5', '$dn6') group by storage_inst_id"
        result: "8192##8192"
    cleanupDDls:
      - "use polardbx;"
    checkTriggers:
      - "select count(1) from metadb.ddl_engine_task where state != 'success' and schema_name = 'orders_comm1';###0"
      - "select count(1) from metadb.ddl_plan where state != 'success' and table_schema = 'orders_comm1';###0"
    checkActions:
      storagePoolValueCheck:
        - sp1 "$dn3,$dn4" "$dn3"
        - sp2 "$dn5,$dn6" "$dn5"
        - sp3 "$dn7,$dn8" "$dn7"
        - _recycle "" ""
        - _default "$dn1,$dn2" $dn1
      datasourceCheck:
        - test_db1 $dn3,$dn4
        - test_db2 $dn5,$dn6
        - test_db3 $dn3,$dn4,$dn5,$dn6
        - test_db4 $dn3,$dn4,$dn7,$dn8
        - old_auto_database $dn1,$dn2
        - old_auto_database2 $dn1,$dn2
        - orders_comm1 $dn3,$dn4,$dn5,$dn6,$dn7,$dn8
      localityValueCheck:
        - orders_comm1.orders_region table "storage_pools='sp1',primary_storage_pool='sp1'"
      tableGroupMatchCheck:
        - orders_comm1.orders_region $tg1 "storage_pools='sp1',primary_storage_pool='sp1'"
      # auto generate create table, tablegroup.
      partitionLocalityCheck:
        - $tg1.p1 "storage_pools='sp3',primary_storage_pool='sp3'"
        - $tg1.p2 "storage_pools='sp2',primary_storage_pool='sp2'"
        - $tg1.p3 "storage_pools='sp2',primary_storage_pool='sp2'"
        - $tg1.p4 "storage_pools='sp2',primary_storage_pool='sp2'"
      topologyCheck:
        - orders_comm1.orders_region.p1 partition $dn7,$dn8
        - orders_comm1.orders_region.p2 partition $dn5,$dn6
        - orders_comm1.orders_region.p3 partition $dn5,$dn6
        - orders_comm1.orders_region.p4 partition $dn5,$dn6
        - orders_comm1.orders_region.p_default partition $dn3,$dn4
  ## forth pass, auto balanace
  - prepareDDls:
      - "use orders_comm1"
      - "rebalance database drain_storage_pool = 'sp2' drain_node = '$dn5,$dn6'"
    dbNames: [orders_comm1]
    rejectDDls:
      - ddl: "alter table orders_region move partitions p1 to '$dn5'"
        message: "alter tablegroup operation not compatebale with partition"
    expectedSQLs:
    cleanupDDls:
      - "use polardbx;"
    checkTriggers:
      - "select count(1) from metadb.ddl_engine_task where state != 'success' and schema_name = 'orders_comm1';###0"
      - "select count(1) from metadb.ddl_plan where state != 'success' and table_schema = 'orders_comm1';###0"
    checkActions:
      storagePoolValueCheck:
        - sp1 "$dn3,$dn4" "$dn3"
        - sp2 "$dn5,$dn6" "$dn5"
        - sp3 "$dn7,$dn8" "$dn7"
        - _recycle "" ""
        - _default "$dn1,$dn2" $dn1
      datasourceCheck:
        - test_db1 $dn3,$dn4
        - test_db2 $dn5,$dn6
        - test_db3 $dn3,$dn4,$dn5,$dn6
        - test_db4 $dn3,$dn4,$dn7,$dn8
        - old_auto_database $dn1,$dn2
        - old_auto_database2 $dn1,$dn2
        - orders_comm1 $dn3,$dn4,$dn7,$dn8
      localityValueCheck:
        - orders_comm1.orders_region table "storage_pools='sp1',primary_storage_pool='sp1'"
      tableGroupMatchCheck:
        - orders_comm1.orders_region $tg1 "storage_pools='sp1',primary_storage_pool='sp1'"
      # auto generate create table, tablegroup.
      partitionLocalityCheck:
        - $tg1.p1 "storage_pools='sp3',primary_storage_pool='sp3'"
      topologyCheck:
        - orders_comm1.orders_region.p1 partition $dn7,$dn8
        - orders_comm1.orders_region.p2 partition $dn3,$dn4
        - orders_comm1.orders_region.p3 partition $dn3,$dn4
        - orders_comm1.orders_region.p4 partition $dn3,$dn4
        - orders_comm1.orders_region.p_default partition $dn3,$dn4
  ## fifth pass, drain storage pool
  - prepareDDls:
      - "use polardbx"
      - "alter storage pool sp1 drain node '$dn4'"
    dbNames: [orders_comm1]
    rejectDDls:
      - ddl: "alter table orders_region move partitions p1 to '$dn5'"
        message: "alter tablegroup operation not compatebale with partition"
    expectedSQLs:
    cleanupDDls:
      - "use polardbx;"
    checkTriggers:
      - "select count(1) from metadb.ddl_engine_task where state != 'success';###0"
      - "select count(1) from metadb.ddl_plan where state != 'success' and table_schema = 'polardbx';###0"
    checkActions:
      storagePoolValueCheck:
        - sp1 "$dn3" "$dn3"
        - sp2 "$dn5,$dn6" "$dn5"
        - sp3 "$dn7,$dn8" "$dn7"
        - _recycle "$dn4" ""
        - _default "$dn1,$dn2" $dn1
      datasourceCheck:
        - test_db1 $dn3
        - test_db2 $dn5,$dn6
        - test_db3 $dn3,$dn5,$dn6
        - test_db4 $dn3,$dn7,$dn8
        - old_auto_database $dn1,$dn2
        - old_auto_database2 $dn1,$dn2
        - orders_comm1 $dn3,$dn7,$dn8
      localityValueCheck:
        - orders_comm1.orders_region table "storage_pools='sp1',primary_storage_pool='sp1'"
      tableGroupMatchCheck:
        - orders_comm1.orders_region $tg1 "storage_pools='sp1',primary_storage_pool='sp1'"
      # auto generate create table, tablegroup.
      partitionLocalityCheck:
        - $tg1.p1 "storage_pools='sp3',primary_storage_pool='sp3'"
      topologyCheck:
        - orders_comm1.orders_region.p1 partition $dn7,$dn8
        - orders_comm1.orders_region.p2 partition $dn3
        - orders_comm1.orders_region.p3 partition $dn3
        - orders_comm1.orders_region.p4 partition $dn3
        - orders_comm1.orders_region.p_default partition $dn3
  ## sixth pass, drain storage pool
  - prepareDDls:
      - "use polardbx"
      - "alter storage pool sp1 append node '$dn4'"
    dbNames: [orders_comm1]
    rejectDDls:
      - ddl: "alter table orders_region move partitions p1 to '$dn5'"
        message: "alter tablegroup operation not compatebale with partition"
    expectedSQLs:
    cleanupDDls:
      - "use polardbx;"
    checkTriggers:
      - "select count(1) from metadb.ddl_engine where state != 'success';###0"
      - "select count(1) from metadb.ddl_plan where state != 'success' and table_schema = 'polardbx';###0"
    checkActions:
      storagePoolValueCheck:
        - sp1 "$dn3,$dn4" "$dn3"
        - sp2 "$dn5,$dn6" "$dn5"
        - sp3 "$dn7,$dn8" "$dn7"
        - _recycle "" ""
        - _default "$dn1,$dn2" $dn1
      datasourceCheck:
        - test_db1 $dn3,$dn4
        - test_db2 $dn5,$dn6
        - test_db3 $dn3,$dn4,$dn5,$dn6
        - test_db4 $dn3,$dn4,$dn7,$dn8
        - old_auto_database $dn1,$dn2
        - old_auto_database2 $dn1,$dn2
        - orders_comm1 $dn3,$dn4,$dn7,$dn8
      localityValueCheck:
        - orders_comm1.orders_region table "storage_pools='sp1',primary_storage_pool='sp1'"
      tableGroupMatchCheck:
        - orders_comm1.orders_region $tg1 "storage_pools='sp1',primary_storage_pool='sp1'"
      # auto generate create table, tablegroup.
      partitionLocalityCheck:
        - $tg1.p1 "storage_pools='sp3',primary_storage_pool='sp3'"
      topologyCheck:
        - orders_comm1.orders_region.p1 partition $dn7,$dn8
        - orders_comm1.orders_region.p2 partition $dn3,$dn4
        - orders_comm1.orders_region.p3 partition $dn3,$dn4
        - orders_comm1.orders_region.p4 partition $dn3,$dn4
        - orders_comm1.orders_region.p_default partition $dn3,$dn4
cleanupDDls:
  - "use polardbx;"
