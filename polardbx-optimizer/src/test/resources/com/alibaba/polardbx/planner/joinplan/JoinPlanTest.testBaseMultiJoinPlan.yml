-
  sql: |
    select * from test_hash_tb a join test_hash_tb b on a.id=b.id join test_hash_tb c  on b.id=c.id where a.id="xx";

  plan: |
    phytableoperation(tables="optest_0000.[test_hash_tb, test_hash_tb, test_hash_tb]", sql="select `a`.`id`, `a`.`name`, `a`.`create_time`, `b`.`id`, `b`.`name`, `b`.`create_time`, `c`.`id`, `c`.`name`, `c`.`create_time` from ? as `a` inner join ? as `b` on (`a`.`id` = `b`.`id`) inner join ? as `c` on (`b`.`id` = `c`.`id`) where (`a`.`id` = 'xx')")

-
  sql: |
    select * from test_hash_tb a join test_hash_tb b join test_hash_tb c on a.id=b.id and a.id=c.id where a.id="xx";

  plan: |
    phytableoperation(tables="optest_0000.[test_hash_tb, test_hash_tb, test_hash_tb]", sql="select `a`.`id`, `a`.`name`, `a`.`create_time`, `b`.`id`, `b`.`name`, `b`.`create_time`, `c`.`id`, `c`.`name`, `c`.`create_time` from ? as `a` inner join ? as `b` inner join ? as `c` on ((`a`.`id` = `b`.`id`) and (`a`.`id` = `c`.`id`)) where (`a`.`id` = 'xx')")

-
  sql: |
    select * from test_hash_tb a left join test_hash_tb b on a.id = b.id and b.id = 'xx' left join test_hash_tb c on b.id = c.id and c.id = 'xx' where a.id = 'xx';

  plan: |
    phytableoperation(tables="optest_0000.[test_hash_tb, test_hash_tb, test_hash_tb]", sql="select `a`.`id`, `a`.`name`, `a`.`create_time`, `b`.`id`, `b`.`name`, `b`.`create_time`, `c`.`id`, `c`.`name`, `c`.`create_time` from ? as `a` left join ? as `b` on ((`a`.`id` = `b`.`id`) and (`b`.`id` = 'xx')) left join ? as `c` on ((`b`.`id` = `c`.`id`) and (`c`.`id` = 'xx')) where (`a`.`id` = 'xx')")

-
  sql: |
    select * from test_hash_tb t1 join test_hash_tb t2 on t1.id=t2.id join test_hash_tb t3 on t1.id=t3.id;

  plan: |

    Gather(concurrent=true)
      LogicalView(tables="[0000-0003].test_hash_tb", shardCount=4, sql="SELECT `test_hash_tb`.`id`, `test_hash_tb`.`name`, `test_hash_tb`.`create_time`, `test_hash_tb0`.`id` AS `id0`, `test_hash_tb0`.`name` AS `name0`, `test_hash_tb0`.`create_time` AS `create_time0`, `test_hash_tb1`.`id` AS `id1`, `test_hash_tb1`.`name` AS `name1`, `test_hash_tb1`.`create_time` AS `create_time1` FROM `test_hash_tb` AS `test_hash_tb` INNER JOIN `test_hash_tb` AS `test_hash_tb0` ON (`test_hash_tb`.`id` = `test_hash_tb0`.`id`) INNER JOIN `test_hash_tb` AS `test_hash_tb1` ON ((`test_hash_tb`.`id` = `test_hash_tb1`.`id`) AND (`test_hash_tb0`.`id` = `test_hash_tb1`.`id`))")

-
  sql: |
    select * from test_hash_tb t1 join test_hash_tb t2 on t1.id=t2.id join test_hash_tb t3 on t2.id=t3.id;

  plan: |

    Gather(concurrent=true)
      LogicalView(tables="[0000-0003].test_hash_tb", shardCount=4, sql="SELECT `test_hash_tb`.`id`, `test_hash_tb`.`name`, `test_hash_tb`.`create_time`, `test_hash_tb0`.`id` AS `id0`, `test_hash_tb0`.`name` AS `name0`, `test_hash_tb0`.`create_time` AS `create_time0`, `test_hash_tb1`.`id` AS `id1`, `test_hash_tb1`.`name` AS `name1`, `test_hash_tb1`.`create_time` AS `create_time1` FROM `test_hash_tb` AS `test_hash_tb` INNER JOIN `test_hash_tb` AS `test_hash_tb0` ON (`test_hash_tb`.`id` = `test_hash_tb0`.`id`) INNER JOIN `test_hash_tb` AS `test_hash_tb1` ON ((`test_hash_tb`.`id` = `test_hash_tb1`.`id`) AND (`test_hash_tb0`.`id` = `test_hash_tb1`.`id`))")

#-
#  sql: |
#    SELECT A.REFERENCED_TABLE_SCHEMA AS PKTABLE_CAT, NULL AS PKTABLE_SCHEM, A.REFERENCED_TABLE_NAME AS PKTABLE_NAME, A.REFERENCED_COLUMN_NAME AS PKCOLUMN_NAME, A.TABLE_SCHEMA AS FKTABLE_CAT, NULL AS FKTABLE_SCHEM, A.TABLE_NAME AS FKTABLE_NAME, A.COLUMN_NAME AS FKCOLUMN_NAME, A.ORDINAL_POSITION AS KEY_SEQ, CASE WHEN R.UPDATE_RULE = 'CASCADE' THEN 0 WHEN R.UPDATE_RULE = 'SET NULL' THEN 2 WHEN R.UPDATE_RULE = 'SET DEFAULT' THEN 4 WHEN R.UPDATE_RULE = 'SET RESTRICT' THEN 1 WHEN R.UPDATE_RULE = 'SET NO ACTION' THEN 3 ELSE 3 END AS UPDATE_RULE, CASE WHEN R.DELETE_RULE = 'CASCADE' THEN 0 WHEN R.DELETE_RULE = 'SET NULL' THEN 2 WHEN R.DELETE_RULE = 'SET DEFAULT' THEN 4 WHEN R.DELETE_RULE = 'SET RESTRICT' THEN 1 WHEN R.DELETE_RULE = 'SET NO ACTION' THEN 3 ELSE 3 END AS DELETE_RULE, A.CONSTRAINT_NAME AS FK_NAME, 'PRIMARY' AS PK_NAME, 7 AS DEFERRABILITY FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE A JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE D ON (D.TABLE_SCHEMA=A.REFERENCED_TABLE_SCHEMA AND D.TABLE_NAME=A.REFERENCED_TABLE_NAME AND D.COLUMN_NAME=A.REFERENCED_COLUMN_NAME) JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS R ON (R.CONSTRAINT_NAME = A.CONSTRAINT_NAME AND R.TABLE_NAME = A.TABLE_NAME AND R.CONSTRAINT_SCHEMA = A.TABLE_SCHEMA) WHERE D.CONSTRAINT_NAME IS NOT NULL AND A.TABLE_SCHEMA = 'tpch'AND A.TABLE_NAME = 'lineitem' ORDER BY FKTABLE_CAT, FKTABLE_NAME, KEY_SEQ, PKTABLE_NAME;
#
#  plan: |
#
#    MemSort(sort="FKTABLE_CAT ASC,FKTABLE_NAME ASC,KEY_SEQ ASC,PKTABLE_NAME ASC")
#      Project(PKTABLE_CAT="REFERENCED_TABLE_SCHEMA", PKTABLE_SCHEM="null", PKTABLE_NAME="REFERENCED_TABLE_NAME", PKCOLUMN_NAME="REFERENCED_COLUMN_NAME", FKTABLE_CAT="TABLE_SCHEMA", FKTABLE_SCHEM="null", FKTABLE_NAME="TABLE_NAME", FKCOLUMN_NAME="COLUMN_NAME", KEY_SEQ="ORDINAL_POSITION", UPDATE_RULE="CASE(=($31, 'CASCADE'), 0, =($31, 'SET NULL'), 2, =($31, 'SET DEFAULT'), 4, =($31, 'SET RESTRICT'), 1, =($31, 'SET NO ACTION'), 3, 3)", DELETE_RULE="CASE(=($32, 'CASCADE'), 0, =($32, 'SET NULL'), 2, =($32, 'SET DEFAULT'), 4, =($32, 'SET RESTRICT'), 1, =($32, 'SET NO ACTION'), 3, 3)", FK_NAME="CONSTRAINT_NAME", PK_NAME="'PRIMARY'", DEFERRABILITY="7")
#        HashJoin(condition="CONSTRAINT_NAME = CONSTRAINT_NAME", type="inner")
#          HashJoin(condition="REFERENCED_TABLE_NAME = TABLE_NAME AND REFERENCED_COLUMN_NAME = COLUMN_NAME AND TABLE_SCHEMA = REFERENCED_TABLE_SCHEMA", type="inner")
#            Filter(condition="TABLE_NAME = 'lineitem' AND TABLE_SCHEMA = 'tpch'")
#              VirtualView(virtualViewType="KEY_COLUMN_USAGE")
#            Filter(condition="IS NOT NULL(CONSTRAINT_NAME)")
#              VirtualView(virtualViewType="KEY_COLUMN_USAGE")
#          Filter(condition="TABLE_NAME = 'lineitem' AND CONSTRAINT_SCHEMA = 'tpch'")
#            VirtualView(virtualViewType="REFERENTIAL_CONSTRAINTS")

-
  sql: |
    SELECT
      COUNT(DISTINCT(id2))
    FROM
      (
        SELECT
          tb2.id as id2,
          tb1.id as id1
        FROM
          test_hash_tb4 tb1
          JOIN test_hash_tb2 tb2 ON tb1.int_col1 = tb2.id
          LEFT JOIN test_hash_tb3 tb3 ON tb1.id = tb3.id
        WHERE
          (
            SELECT
              COUNT(1)
            FROM
              test_hash_tb4
            WHERE
              int_col1 = tb2.id
              AND int_col2 = 1
          ) > 1
          AND tb3.name IS NULL
      ) a
    LIMIT
      0, 1000;

  plan: |
    
    limit(offset=0, fetch=1000)
      hashagg(count(distinct id2)="count(id0)")
        hashagg(group="id0")
          project(id0="id1")
            filter(condition="case(is null($6), 0, $5) > 1")
              hashjoin(condition="int_col1 = id1", type="left")
                filter(condition="is null(name)")
                  project(id="id", int_col1="int_col1", id1="id1", id0="id0", name="name")
                    hashjoin(condition="id = int_col1", type="inner")
                      gather(concurrent=true)
                        logicalview(tables="[0000-0003].test_hash_tb4,test_hash_tb3", shardcount=4, sql="select `test_hash_tb4`.`id`, `test_hash_tb4`.`int_col1`, `t`.`id` as `id0`, `t`.`name` from `test_hash_tb4` as `test_hash_tb4` left join (select `id`, `name` from `test_hash_tb3` as `test_hash_tb3`) as `t` on (`test_hash_tb4`.`id` = `t`.`id`)")
                      gather(concurrent=true)
                        logicalview(tables="[0000-0003].test_hash_tb2", shardcount=4, sql="select `id` from `test_hash_tb2` as `test_hash_tb2`")
                project(count(1)="count(1)", int_col1="int_col1")
                  hashagg(group="int_col1", count(1)="sum(count(1))")
                    gather(concurrent=true)
                      logicalview(tables="[0000-0003].test_hash_tb4", shardcount=4, sql="select `int_col1`, count(*) as `count(1)` from `test_hash_tb4` as `test_hash_tb4` where (`int_col2` = 1) group by `int_col1`")