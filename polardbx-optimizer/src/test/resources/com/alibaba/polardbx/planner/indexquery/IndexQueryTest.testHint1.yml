-
  sql: |
    select id from t as a force index(name_1);

  plan: |

    LogicalView(tables="optest_0000.t", sql="SELECT `a`.`id` FROM `t` AS `a` FORCE INDEX(NAME_1)")

-
  sql: |
    select id from t force index(name_1);

  plan: |

    LogicalView(tables="optest_0000.t", sql="SELECT `t`.`id` FROM `t` AS `t` FORCE INDEX(NAME_1)")

-
  sql: |
    select id from abc as a force index(name_1);

  plan: |

    Gather(concurrent=true)
      LogicalView(tables="[0000-0003].abc_[0-7]", shardCount=8, sql="SELECT `id` FROM `abc` AS `abc` FORCE INDEX(NAME_1)")

-
  sql: |
    select id from abc force index(name_1);

  plan: |

    Gather(concurrent=true)
      LogicalView(tables="[0000-0003].abc_[0-7]", shardCount=8, sql="SELECT `id` FROM `abc` AS `abc` FORCE INDEX(NAME_1)")

-
  sql: |
    select sum(CASE WHEN a.purchase_times=1 THEN 1 else 0 END ) oneCustomersNum, sum(CASE WHEN a.purchase_times=1 THEN a.payment else 0 END ) onceMoney, sum(CASE WHEN a.purchase_times=1 THEN a.interval_day else 0 END ) oneIntervalDay, sum(CASE WHEN a.purchase_times=2 THEN 1 else 0 END ) twoCustomersNum, sum(CASE WHEN a.purchase_times=2 THEN a.payment else 0 END ) twoMoney, sum(CASE WHEN a.purchase_times=2 THEN a.interval_day else 0 END ) twoIntervalDay, sum(CASE WHEN a.purchase_times=3 THEN 1 else 0 END ) threeCustomersNum, sum(CASE WHEN a.purchase_times=3 THEN a.payment else 0 END ) threeMoney, sum(CASE WHEN a.purchase_times=3 THEN a.interval_day else 0 END ) threeIntervalDay, sum(CASE WHEN a.purchase_times=4 THEN 1 else 0 END ) fourCustomersNum, sum(CASE WHEN a.purchase_times=4 THEN a.payment else 0 END ) fourMoney, sum(CASE WHEN a.purchase_times=4 THEN a.interval_day else 0 END ) fourIntervalDay, sum(CASE WHEN a.purchase_times=5 THEN 1 else 0 END ) fiveCustomersNum, sum(CASE WHEN a.purchase_times=5 THEN a.payment else 0 END ) fiveMoney, sum(CASE WHEN a.purchase_times=5 THEN a.interval_day else 0 END ) fiveIntervalDay from t_buyer_day a force index (sellerId_during) WHERE a.sellerId = 3234284498 and a.pay_trades>0 and ( a.during = str_to_date('2018-01-10', '%Y-%m-%d') );

  plan: |
    logicalview(tables="optest_0001.t_buyer_day_2", sql="select sum((case when (`purchase_times` = 1) then 1 else 0 end)) as `onecustomersnum`, sum((case when (`purchase_times` = 1) then `payment` else 0 end)) as `oncemoney`, sum((case when (`purchase_times` = 1) then `interval_day` else 0 end)) as `oneintervalday`, sum((case when (`purchase_times` = 2) then 1 else 0 end)) as `twocustomersnum`, sum((case when (`purchase_times` = 2) then `payment` else 0 end)) as `twomoney`, sum((case when (`purchase_times` = 2) then `interval_day` else 0 end)) as `twointervalday`, sum((case when (`purchase_times` = 3) then 1 else 0 end)) as `threecustomersnum`, sum((case when (`purchase_times` = 3) then `payment` else 0 end)) as `threemoney`, sum((case when (`purchase_times` = 3) then `interval_day` else 0 end)) as `threeintervalday`, sum((case when (`purchase_times` = 4) then 1 else 0 end)) as `fourcustomersnum`, sum((case when (`purchase_times` = 4) then `payment` else 0 end)) as `fourmoney`, sum((case when (`purchase_times` = 4) then `interval_day` else 0 end)) as `fourintervalday`, sum((case when (`purchase_times` = 5) then 1 else 0 end)) as `fivecustomersnum`, sum((case when (`purchase_times` = 5) then `payment` else 0 end)) as `fivemoney`, sum((case when (`purchase_times` = 5) then `interval_day` else 0 end)) as `fiveintervalday` from `t_buyer_day` as `t_buyer_day` force index(sellerid_during) where ((`sellerid` = 3234284498) and (`pay_trades` > 0) and (`during` = str_to_date('2018-01-10', '%y-%m-%d')))")

-
  sql: |
    /*+TDDL:BKA_JOIN(t,abc)*/
    select t.id from abc force index(name_1) join t force index(name_2) on t.id = abc.id;

  plan: |

    Project(id="id")
      BKAJoin(condition="id = id", type="inner")
        LogicalView(tables="optest_0000.t", sql="SELECT `id` FROM `t` AS `t`")
        Gather(concurrent=true)
          LogicalView(tables="[0000-0003].abc_[0-7]", shardCount=8, sql="SELECT `id` FROM `abc` AS `abc` FORCE INDEX(NAME_1) WHERE (`id` IN (...))")

-
  sql: |
    select t.id from abc force index(name_1) join t force index(name_2) on t.id = abc.id where t.id in(select purchase_times from t_buyer_day a force index (sellerId_during) WHERE a.sellerId = 3234284498);

  plan: |

    Project(id0="id")
      BKAJoin(condition="id = id", type="inner")
        SemiHashJoin(condition="id = purchase_times", type="semi", build="inner")
          LogicalView(tables="optest_0000.t", sql="SELECT `id` FROM `t` AS `t`")
          LogicalView(tables="optest_0001.t_buyer_day_2", sql="SELECT `purchase_times` FROM `t_buyer_day` AS `t_buyer_day` FORCE INDEX(SELLERID_DURING) WHERE (`sellerId` = 3234284498)")
        Gather(concurrent=true)
          LogicalView(tables="[0000-0003].abc_[0-7]", shardCount=8, sql="SELECT `id` FROM `abc` AS `abc` FORCE INDEX(NAME_1) WHERE (`id` IN (...))")

-
  sql: |
    select a.id
    from
      test_hash_tb a force index(tht_1)
    where
      a.id > 5
      and ( a.int_col1=1
           or ( a.int_col2=1
                and ( a.int_col3=1
                          or ( a.int_col4=1 and  a.int_col5=5 and ( a.int_col6=6
                                                                      or
                                                                     a.id in (select id from test_hash_tb3 force index(tht_3))
                                                                   )
                             )
                    )
               )

           )

  plan: |
    gather(concurrent=true)
      logicalview(tables="[0000-0003].test_hash_tb", shardcount=4, sql="select `id` from `test_hash_tb` as `test_hash_tb` where ((`id` > 5) and ((`int_col1` = 1) or ((`int_col2` = 1) and ((`int_col3` = 1) or ((`int_col4` = 1) and (`int_col5` = 5) and ((`int_col6` = 6) or (`id` in(?))))))))")

    >> individual scalar subquery :
    gather(concurrent=true)
      logicalview(tables="[0000-0003].test_hash_tb3", shardcount=4, sql="select `id` from `test_hash_tb3` as `test_hash_tb3`")

-
  sql: |
    select a.id
    from
      test_hash_tb a USE index for join(tht_1) ignore index (tht_2,tht_3)
    where
      a.id > 5
      and ( a.int_col1=1
           or ( a.int_col2=1
                and ( a.int_col3=1
                    )
               )

           )
  plan: |

    Gather(concurrent=true)
      LogicalView(tables="[0000-0003].test_hash_tb", shardCount=4, sql="SELECT `id` FROM `test_hash_tb` AS `test_hash_tb` WHERE ((`id` > 5) AND ((`int_col1` = 1) OR ((`int_col2` = 1) AND (`int_col3` = 1))))")
