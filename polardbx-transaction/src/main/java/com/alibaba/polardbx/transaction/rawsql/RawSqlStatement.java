/*
 * Copyright [2013-2021], Alibaba Group Holding Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.alibaba.polardbx.transaction.rawsql;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class RawSqlStatement implements Statement {

    protected String            targetGroup;
    protected String            sql;
    protected List<String>      sqls = new ArrayList<>();
    private boolean             isClosed;

    public RawSqlStatement(){
    }

    public RawSqlStatement(String sql){
        this.sql = sql;
    }

    public String getTargetGroup() {
        return targetGroup;
    }

    public void setTargetGroup(String targetGroup) {
        this.targetGroup = targetGroup;
    }

    public void addBatch(String sql) throws SQLException {
        this.sqls.add(sql);
    }

    public void cancel() throws SQLException {
        throw new UnsupportedOperationException();
    }

    public void clearBatch() throws SQLException {
        this.sqls.clear();
    }

    public void clearWarnings() throws SQLException {
        throw new UnsupportedOperationException();
    }

    public void close() throws SQLException {
        isClosed = true;
    }

    public boolean execute(String sql) throws SQLException {
        this.sql = sql;
        return true;
    }

    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        this.sql = sql;
        return true;
    }

    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        this.sql = sql;
        return true;
    }

    public boolean execute(String sql, String[] columnNames) throws SQLException {
        this.sql = sql;
        return true;
    }

    public int[] executeBatch() throws SQLException {
        return null;
    }

    public ResultSet executeQuery(String sql) throws SQLException {
        this.sql = sql;
        return null;
    }

    public int executeUpdate(String sql) throws SQLException {
        this.sql = sql;
        return 0;
    }

    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        this.sql = sql;
        return 0;
    }

    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        this.sql = sql;
        return 0;
    }

    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        this.sql = sql;
        return 0;
    }

    public Connection getConnection() throws SQLException {
        throw new UnsupportedOperationException();
    }

    public int getFetchDirection() throws SQLException {
        throw new UnsupportedOperationException();
    }

    public int getFetchSize() throws SQLException {
        throw new UnsupportedOperationException();
    }

    public ResultSet getGeneratedKeys() throws SQLException {
        throw new UnsupportedOperationException();
    }

    public int getMaxFieldSize() throws SQLException {
        throw new UnsupportedOperationException();
    }

    public int getMaxRows() throws SQLException {
        throw new UnsupportedOperationException();
    }

    public boolean getMoreResults() throws SQLException {
        return true;
    }

    public boolean getMoreResults(int current) throws SQLException {
        return true;
    }

    public int getQueryTimeout() throws SQLException {
        throw new UnsupportedOperationException();
    }

    public ResultSet getResultSet() throws SQLException {
        return null;
    }

    public int getResultSetConcurrency() throws SQLException {
        throw new UnsupportedOperationException();
    }

    public int getResultSetHoldability() throws SQLException {
        throw new UnsupportedOperationException();
    }

    public int getResultSetType() throws SQLException {
        throw new UnsupportedOperationException();
    }

    public int getUpdateCount() throws SQLException {
        return 0;
    }

    public SQLWarning getWarnings() throws SQLException {
        return null;
    }

    public void setCursorName(String name) throws SQLException {
    }

    public void setEscapeProcessing(boolean enable) throws SQLException {
    }

    public void setFetchDirection(int direction) throws SQLException {
    }

    public void setFetchSize(int rows) throws SQLException {
    }

    public void setMaxFieldSize(int max) throws SQLException {
    }

    public void setMaxRows(int max) throws SQLException {
    }

    public void setQueryTimeout(int seconds) throws SQLException {
    }

    public String getSql() {
        return sql;
    }

    public void setSql(String sql) {
        this.sql = sql;
    }

    public boolean isClosed() {
        return isClosed;
    }

    public void setClosed(boolean isClosed) {
        this.isClosed = isClosed;
    }

    public boolean isSuccess() {
        return true;
    }

    public void setSuccess(boolean success) {
    }

    public <T> T unwrap(Class<T> iface) throws SQLException {
        return null;
    }

    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return false;
    }

    public void setPoolable(boolean poolable) throws SQLException {
    }

    public boolean isPoolable() throws SQLException {
        return false;
    }

    public void closeOnCompletion() throws SQLException {
    }

    public boolean isCloseOnCompletion() throws SQLException {
        return false;
    }

    @Override
    public String toString() {
        return getRawSql();
    }

    public String getRawSql() {
        if (!sqls.isEmpty()) {
            StringBuilder sb = new StringBuilder();
            for (String sql : sqls) {
                sb.append(sql).append(";\n");
            }
            return sb.toString();
        } else {
            return sql;
        }
    }
}
